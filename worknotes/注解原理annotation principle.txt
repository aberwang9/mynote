注解原理：
	jdk se1.5 中只有几个注解@override @Deprecated(过时标签) @suppressWarnning
	注解的可用的类型包括以下几种：所有基本类型、String、Class、enum、Annotation、以上类型的数组形式。元素不能有不确定的值，即要么有默认值，要么在使用注解的时候提供元素的值。
	而且元素不能使用null作为默认值。注解在只有一个元素且该元素的名称是value的情况下,在使用注解的时候可以省略“value=”，直接写需要的值即可。 
	
	原理： (意思就是说注解在编译时就会被相应的编译器编译成class文件，即注解属性放在文件的类属性，或方法属性等)
			从java源码到class字节码是由编译器完成的，编译器会对java源码进行解析并生成class文件，而注解也是在编译时由编译器进行处理，编译器会对注解符号处理并附加到class结构中，
			根据jvm规范，class文件结构是严格有序的格式，唯一可以附加信息到class结构中的方式就是保存到class结构的attributes属性中。我们知道对于类、字段、方法，
			在class结构中都有自己特定的表结构，而且各自都有自己的属性，而对于注解，作用的范围也可以不同，可以作用在类上，也可以作用在字段或方法上，
			这时编译器会对应将注解信息存放到类、字段、方法自己的属性上。在我们的AnnotationTest类被编译后，在对应的AnnotationTest.class文件中会包含一个RuntimeVisibleAnnotations属性
			由于这个注解是作用在类上，所以此属性被添加到类的属性集上。即Test注解的键值对value=test会被记录起来。而当JVM加载AnnotationTest.class文件字节码时，
			就会将RuntimeVisibleAnnotations属性值保存到AnnotationTest的Class对象中，于是就可以通过AnnotationTest.class.getAnnotation(Test.class)获取到Test注解对象，
			进而再通过Test注解对象获取到Test里面的属性值。这里可能会有疑问，Test注解对象是什么？其实注解被编译后的本质就是一个继承Annotation接口的接口，
			所以@Test其实就是“public interface Test extends Annotation”，当我们通过AnnotationTest.class.getAnnotation(Test.class)调用时，JDK会通过动态代理生成一个实现了Test接口的对象，
			并把将RuntimeVisibleAnnotations属性值设置进此对象中，此对象即为Test注解对象，通过它的value()方法就可以获取到注解值。
			Java注解实现机制的整个过程如上面所示，它的实现需要编译器和JVM一起配合。
			
	元注解：
		@Target

		表示该注解可以用于什么地方，可能的ElementType参数有：
		CONSTRUCTOR：构造器的声明
		FIELD：域声明（包括enum实例）
		LOCAL_VARIABLE：局部变量声明
		METHOD：方法声明
		PACKAGE：包声明
		PARAMETER：参数声明
		TYPE：类、接口（包括注解类型）或enum声明
		
		@Retention
		表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：
		SOURCE：注解将被编译器丢弃
		CLASS：注解在class文件中可用，但会被VM丢弃
		RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息。
		
		@Document
		将注解包含在Javadoc中
		
		@Inherited
		允许子类继承父类中的注解