正则表达式regular expression：
	？			表示长度为1
	*			表示长度不限
	
	命令或环境	.	[ ]	^	$	\( \)	\{ \}	?	+	|	( )
	vi	√	√	√	√	√	　	　	　	　	　
	Visual C++	√	√	√	√	√	　	　	　	　	　
	awk	√	√	√	√	　	awk是支持该语法的，只是要在命令 行加入 --posix or --re-interval参数即可，可见 man awk中的interval expression	√	√	√	√
	sed	√	√	√	√	√	√	　	　	　	　
	delphi	√	√	√	√	√	　	√	√	√	√
	python	√	√	√	√	√	√	√	√	√	√
	java	√	√	√	√	√	√	√	√	√　	√　
	javascript	√	√	√	√	√	　	√	√	√	√
	php	√	√	√	√	√	　	　	　	　	　
	perl	√	√	√	√	√	　	√	√	√	√
	C#	√	√	√	√	　	　	√	√	√	√
	
	
	+  ：  runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。
	*  ：  runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。
	？ ：  colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。
	
正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。
	（一）普通字符。
	（二）非打印字符：
	
			字符	描述
			\cx	匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
			\f	匹配一个换页符。等价于 \x0c 和 \cL。
			\n	匹配一个换行符。等价于 \x0a 和 \cJ。
			\r	匹配一个回车符。等价于 \x0d 和 \cM。
			\s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
			\S	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
			\t	匹配一个制表符。等价于 \x09 和 \cI。
			\v	匹配一个垂直制表符。等价于 \x0b 和 \cK。
			
	（三）特殊字符
	
			特别字符	描述
			$	匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。
			( )	标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。
			*	匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。
			+	匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。
			.	匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。
			[	标记一个中括号表达式的开始。要匹配 [，请使用 \[。
			?	匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。
			\	将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。
			^	匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。
			{	标记限定符表达式的开始。要匹配 {，请使用 \{。
			|	指明两项之间的一个选择。要匹配 |，请使用 \|。
			
	（四）限定符
	
			字符	描述
			*	匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
			+	匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
			?	匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
			{n}	n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
			{n,}	n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
			{n,m}	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
			
			
			注意：贪婪（贪心）表示会经可能多的匹配字符，非贪婪（非贪心）表示经可能少的匹配字符
					<H1>Chapter 1 - 介绍正则表达式</H1>
					贪婪：下面的表达式匹配从开始小于符号 (<) 到关闭 H1 标记的大于符号 (>) 之间的所有内容。
					/<.*>/
					非贪婪：如果您只需要匹配开始和结束 H1 标签，下面的非贪婪表达式只匹配 <H1>。
					/<.*?>/
					如果只想匹配开始的 H1 标签，表达式则是：
					/<\w+?>/
	 
	（五）定位符
	 
			 字符	描述
			^	匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。
			$	匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。
			\b	匹配一个单词边界，即字与空格间的位置。
			\B	非单词边界匹配。
				
	（六）选择
			?:
			?=
			?!
			
			用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。
			其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，
			在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。
			
	（七）反向引用
	
			对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，
			最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。可以使用非捕获元字符 ?:、?= 或 ?! 来重写捕获，
			忽略对相关匹配的保存。反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：
			"Swift1 Swift2 Swift3Swift4Swift4Swift4"
					(Swift4)       匹配Swift4并获取这一匹配，然后存储供以后使用；
					(Swift4)\1   匹配Swift4Swift4，其中\1即表示使用了存储的匹配(存储的第一个匹配)，相当于匹配两次Swift4；
					(Swift3)(Swift4)\2      匹配Swift3Swift4Swift4，其中\2即表示使用了存储的第二个匹配，即Swift4(当然第一个匹配为：Swift3)；
					(?:Swift3)(Swift4)\1   匹配Swift3Swift4Swift4，与(Swift3)(Swift4)\2相同；
					由于在小括号中使用了?:，所以第一个匹配(Swift3)没有被存储，只存储了后面的第二个匹配(Swift4)；
					若写成(?:Swift3)(Swift4)\2，则正则表达式错误，因为没有存储第二个匹配；
					其中?:的作用是匹配Swift3模式字符串，但不会存储该匹配。
					Swift(?=4)      匹配右边紧跟着4的Swift；
					其中(?=)称为：正向预查匹配，(?=4)表示先看看有没有4，如果有，则把4左边的Swift匹配出来；如果没有，则继续向右查看，这个过程就是正向预查匹配。

					(?=expression)可理解为：匹配字符串expression前面的位置。

					Swift(?!4)     匹配右边不跟着4的Swift；
					其中(?!)称为：正向预查不匹配，(?!4)表示先看看有没有4，如果没有，也即不等于4的情况，则把左边的Swift匹配出来；如果有，则继续向右查看，这个过程就是正向预查不匹配。

					(?!expression)可理解为：匹配后面不是字符串expression的位置。

					(?<=4)Swift    匹配左边紧跟着4的Swift，即第五个Swift单词，索引为26到30的字符；
					其中(?<=)称为：反向预查匹配，(?<=4)表示先看看有没有4，如果有，则把4右边的Swift匹配出来；如果没有，则继续向右查看，这个过程就是反向预查匹配。

					(?<=expression)可理解为：匹配字符串expression后面的位置。

					(?<!4)Swift    匹配左边不跟着4的Swift，即第1、2、3、4、6个Swift单词；
					其中(?<!)称为：反向预查不匹配，(?<!4)表示先看看有没有4，如果没有，也即不等于4的情况，则把右边的Swift匹配出来；如果有，则继续向右查看，这个过程就是反向预查不匹配。

					(?<!expression)可理解为：匹配前面不是字符串expression的位置。
	
在/XXX/ig  中的全局标记i表示忽略大小写，g表示 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。

大写字母，小写字母，数字和特殊字符，其中任意三种组合，且长度在8到15之间：
/^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_!@#$%^&*`~()-+=]+$)(?![a-z0-9]+$)(?![a-z\W_!@#$%^&*`~()-+=]+$)(?![0-9\W_!@#$%^&*`~()-+=]+$)[a-zA-Z0-9\W_!@#$%^&*`~()-+=]{8,15}$/
