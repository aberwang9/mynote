Date 
		java.util.Date是一个“万能接口”，它包含日期、时间，还有毫秒数，如果你只想用java.util.Date存储日期，或者只存储时间，那么，只有你知道哪些部分的数据是有用的，哪些部分的数据是不能用的
		目前我们可以通过使用：
			Date date0 = new Date;
			Date date1 = new Date(time);
			这两种方法创建对象的不同主要是通过指定的时间戳不同，通过设置Date 中的 fastTime 进行设置Date 对象的时间。

			除了使用构造方法获取实例，Date 还可以通过 Instant 来创建一个Date 实例：

			Instant instant = Instant.now;
			Date date = Date.from(instant);
		经过我们上述的分析，我们发现，Date 类如今很多方法已经没有什么用处了，确实，如今时间的处理并不直接在Date 类中进行，而是通过Calendar，或者LocalDate 来进行，我们再日常使用中，更多的是要来做一个记录日期的实例。
		

Calender类
		Calender和Date的区别：
			Date用于记录某一个含日期的、精确到毫秒的时间。重点在代表一刹那的时间本身。 Calendar用于将某一日期放到历法中的互动——时间和年、月、日、星期、上午、下午、夏令时等这些历法规定互相作用关系和互动。Calendar本身代表公历的一个简化缩水版，姑且叫“计算机历”。
			
		Calendar 提供的获取实例的方法主要有两种途径：
			1、调用Calendar.getInstance方法
			2、创建内部类Builder 的实例，通过调用其 build方法创建 Calendar 实例
			对于第一种方法，只能先获取当前时间的Calendar，然后再通过调用相应的set 方法设置年月日等，而如果使用内部类Builder 方法，可以通过setInstant 方法设置我们所期望的时间。
			2.2 Calendar 的常用方法
			我们最常用的方法有：
			Calendar calendar = Calendar.getInstance;
			Date date = calendar.getTime;
			
		从上面的分析我们可以看到，Calendar 类 主要是用于作为日历的对象，可以铜鼓哦设置地区时间，区分每个地区的日期，Calendar 提供的方法也没有很多对时间进行的一些操作。

LocalDate/LocalTime类
		Java 8新增了LocalDate和LocalTime接口，为什么要搞一套全新的处理日期和时间的API？因为旧的java.util.Date实在是太难用了。
		java.util.Date月份从0开始，一月是0，十二月是11，变态吧！java.time.LocalDate月份和星期都改成了enum，就不可能再用错了。
		java.util.Date和SimpleDateFormatter都不是线程安全的，而LocalDate和LocalTime和最基本的String一样，是不变类型，不但线程安全，而且不能修改。
		
		构造方法：
			LocalDate 提供了三种创建实例的方法：
				//获取当前时间的LocalDate
				LocalDate localDate = LocalDate.now;
				//获取指定年、月、日 的 LocalDate
				LocalDate ofDate = LocalDate.of(2016,12,31);
				//通过解析字符串获取 LocalDate，如果格式不对会抛出 DateTimeParseException
				LocalDate parseDate = LocalDate.parse("2016-12-31-");
			
			LocalTime 提供了三种创建方法：

				LocalTime localTime = LocalTime.now.withNano(0);
				LocalTime ofTime = LocalTime.of(16,30,25);
				LocalTime parseTime = LocalTime.parse("12:00:01");
		
				//取本月第1天：
				LocalDate firstDayOfThisMonth = 
				today.with(TemporalAdjusters.firstDayOfMonth); // 2014-12-01
				// 取本月第2天：
				LocalDate secondDayOfThisMonth = today.withDayOfMonth(2); // 2014-12-02
				// 取本月最后一天，再也不用计算是28，29，30还是31：
				LocalDate lastDayOfThisMonth = 
				today.with(TemporalAdjusters.lastDayOfMonth); // 2014-12-31
				// 取下一天：
				LocalDate firstDayOf2015 = lastDayOfThisMonth.plusDays(1); // 
				变成了2015-01-01
				// 取2015年1月第一个周一，这个计算用Calendar要死掉很多脑细胞：
				LocalDate firstMondayOf2015 = 
				LocalDate.parse("2015-01-01").with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));
				 // 2015-01-05
		
		在新的Java 8中，日期和时间被明确划分为LocalDate和LocalTime，LocalDate无法包含时间，LocalTime无法包含日期。当然，LocalDateTime才能同时包含日期和时间。